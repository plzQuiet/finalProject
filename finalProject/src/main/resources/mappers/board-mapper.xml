<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">

	<!-- BoardDTO -->
	<resultMap type="Board" id="board_rm">
	
		<id property="boardNo" column="BOARD_NO"/>
		
		<result property="boardTitle" column="BOARD_TITLE"/>
		<result property="boardContent" column="BOARD_CONTENT"/>
		<result property="boardCreateDate" column="B_CREATE_DT"/>
		<result property="boardUpdateDate" column="B_UPDATE_DT"/>
		<result property="readCount" column="READ_COUNT"/>
		<result property="boardDeleteFlag" column="BOARD_DEL_FL"/>
		<result property="boardSecretFlag" column="BOARD_SC_FL"/>
		
		<result property="commentCount" column="COMMENT_COUNT"/>
		
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="memberName" column="MEMBER_NAME"/>
		
		 <!-- 
      	collection 태그 
			: select로 조회된 결과를 컬렉션(List)에 담아 지정된 필드에 세팅      
			
			property : List를 담을 DTO의 필드명
			select   : 실행할 select의 id
			column   : 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
			javaType : List(컬렉션)의 타입을 지정
			ofType 	: List(컬렉션)의 제네릭(타입 제한) 지정
			
      -->
      
    	<collection property="imageList" 
      				select="selectImageList"
      				column="BOARD_NO"
      				javaType="java.util.ArrayList"
      				ofType="BoardImage">
     	</collection> 
     	
     	 <collection property="commentList"
     					select="selectCommentList"
     					column="BOARD_NO"
     					javaType="java.util.ArrayList"
     					ofType="Comment">
     	</collection>
      
		
	</resultMap>
		
	<!-- BoardImage에 대한 resultMap -->
	<resultMap type="BoardImage" id="boardImage_rm">
		<id property="imageNo" column="IMG_NO" />
		
		<result property="boardNo" column="BOARD_NO" />
		<result property="imagePath" column="IMG_PATH" />
		<result property="imageOriginal" column="IMG_ORIGINAL" />
		<result property="imageReName" column="IMG_RENAME" />
		<result property="imageOrder" column="IMG_ORDER" />
	</resultMap>
	
	<!-- Comment에 대한 resultMap-->
	<resultMap type="Comment" id="comment_rm">
		
		<id property="commentNo" column="COMMENT_NO"/>
		
		<result property="memberNo" column="MEMBER_NO" />
		<result property="boardNo" column="BOARD_NO" />
		<result property="commentContent" column="COMMENT_CONTENT" />
		<result property="commentCreateDate" column="C_CREATE_DT" />
		<result property="commentDeleteFlag" column="COMMENT_DEL_FL" />
		<result property="memberName" column="MEMBER_NAME" />
		
	</resultMap>
	
	
	
	<!-- 특정 게시판의 삭제되지 않은 게시글 수 조회 -->
	<select id="getListCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD
		WHERE CAT_CODE = ${cateCode}
		AND BOARD_DEL_FL = 'N'
	</select>
	
	<!-- 게시글 목록 조회 -->
	<select id="selectBoardList" resultMap="board_rm" >
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NAME, READ_COUNT, 
			TO_CHAR(B_CREATE_DT, 'YYYY-MM-DD') B_CREATE_DT,
			TO_CHAR(B_UPDATE_DT, 'YYYY-MM-DD') B_UPDATE_DT,
				(SELECT COUNT(*) FROM "COMMENT" C
    			WHERE B.BOARD_NO = C.BOARD_NO) COMMENT_COUNT , BOARD_SC_FL 
		FROM BOARD B
		JOIN MEMBER USING(MEMBER_NO)
		WHERE CAT_CODE = #{cateCode}
        AND BOARD_DEL_FL = 'N'
		ORDER BY BOARD_NO DESC
	</select>
	
	<!-- 게시글 상세 조회 -->
	<select id="selectBoard" resultMap="board_rm">
		SELECT BOARD_NO, MEMBER_NAME, MEMBER_NO, BOARD_TITLE, BOARD_CONTENT, 
		    TO_CHAR(B_CREATE_DT, 'YYYY-MM-DD') B_CREATE_DT,
		    TO_CHAR(B_UPDATE_DT, 'YYYY-MM-DD') B_UPDATE_DT, READ_COUNT, CAT_CODE
		FROM BOARD
		JOIN MEMBER USING(MEMBER_NO)
		WHERE CAT_CODE = #{cateCode}
		AND BOARD_NO = #{boardNo}
		AND BOARD_DEL_FL = 'N'
	</select>
	
	<!-- 특정 게시물 이미지 조회 -->
	<select id="selectImageList" resultMap="boardImage_rm">
		SELECT * FROM BOARD_IMG
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMG_ORDER
	</select>
	
	<!-- 특정 게시물 댓글 조회 -->
	<select id="selectCommentList" resultMap="comment_rm">
		SELECT COMMENT_NO, MEMBER_NO, MEMBER_NAME, COMMENT_CONTENT,
		    TO_CHAR(C_CREATE_DT, 'YYYY-MM-DD HH24:MI:SS') C_CREATE_DT
		FROM "COMMENT"
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_NO = #{boardNO}
		AND COMMENT_DEL_FL = 'N'
		ORDER BY COMMENT_NO
	</select>
	
	<!-- 조회수 증가 -->
	<update id="increaseReadCount">
		UPDATE BOARD SET
		READ_COUNT = READ_COUNT + 1
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 특정 게시판에 삭제되지 않고 검색 조건이 일치하는 경우 게시글 수 조회 -->
	<select id="getListSearchCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD
	
		<!-- 작성자 검색 : w -->
		<if test='key == "w"'>
			JOIN MEMBER USING(MEMBER_NO)
		</if>
		
		WHERE CAT_CODE = #{cateCode}
		AND BOARD_DEL_FL = 'N'
	
		<choose>
			<!-- 제목 검색 : t -->
			<when test='key == "t"'>
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			
			<!-- 내용 검색 : c -->
			<when test='key == "c"'>
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			
			<!-- 제목 + 내용 -->
			<when test='key == "tc"'>
				AND (BOARD_TITLE LIKE '%후기%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>			
			
			<!-- 작성자 -->
			<when test='key == "w"'>
				AND MEMBER_NAME LIKE '%${query}%'
			</when>
		</choose>
	</select>
	
	<!-- 특정 게시판에서 현재 페이지의 해당 부분에 대한 게시글 목록 조회 -->
	<select id="selectBoardSearchList" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NAME, READ_COUNT, 
    		TO_CHAR(B_CREATE_DT, 'YYYY-MM-DD') B_CREATE_DT,
    		TO_CHAR(B_UPDATE_DT, 'YYYY-MM-DD') B_UPDATE_DT,
    			(SELECT COUNT(*) FROM "COMMENT" C
    			WHERE B.BOARD_NO = C.BOARD_NO) COMMENT_COUNT, BOARD_SC_FL 
		FROM BOARD B
		JOIN MEMBER USING(MEMBER_NO)
		WHERE CAT_CODE = #{cateCode}
        AND BOARD_DEL_FL = 'N'
		ORDER BY BOARD_NO DESC
		
		<choose>
			<!-- 제목 검색 : t -->
			<when test='key == "t"'>
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			
			<!-- 내용 검색 : c -->
			<when test='key == "c"'>
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			
			<!-- 제목 + 내용 -->
			<when test='key == "tc"'>
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>			
			
			<!-- 작성자 -->
			<when test='key == "w"'>
				AND MEMBER_NAME LIKE '%${query}%'
			</when>
		</choose>

	</select>
	
	<!-- 게시글 작성 -->
	<insert id="boardInsert" parameterType="Board" useGeneratedKeys="true">
	
	<selectKey order="BEFORE" resultType="_int" keyProperty="boardNo">
		SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
	</selectKey>
	
		INSERT INTO BOARD 
		VALUES( #{boardNo},
				#{memberNo},
				#{cateCode},
				#{boardTitle},
				#{boardContent},
				DEFAULT, NULL, DEFAULT, DEFAULT, DEFAULT )
	</insert>
	
	<!-- 이미지 리스트 삽입 -->
	<insert id="insertImageList" parameterType="list">
		INSERT INTO BOARD_IMG
		SELECT SEQ_IMG_NO.NEXTVAL, A.*
		FROM (
		
			<foreach collection="list" item="img" separator=" UNION ALL ">
				SELECT 
				#{img.boardNo} BOARD_NO, 
				#{img.imagePath} IMG_PATH,
				#{img.imageOriginal} IMG_ORIGINAL, 
				#{img.imageReName} IMG_RENAME,
				#{img.imageOrder} IMG_ORDER
				FROM DUAL
			</foreach>
		)A
	
	</insert>
	
	<!-- 게시글 수정 -->
	<update id="boardUpdate">
		UPDATE BOARD SET
		BOARD_TITLE = #{boardTitle},
		BOARD_CONTENT = #{boardContent},
		B_UPDATE_DT = SYSDATE,
		<if test='boardSecretFlag != null'>
			BOARD_SC_FL = #{boardSecretFlag}
		</if>
		
		<if test='boardSecretFlag == null'>
			BOARD_SC_FL = DEFAULT
		</if>
		
		WHERE CAT_CODE = #{cateCode}
		AND BOARD_NO = #{boardNo}
	</update>
	
	<!-- 이미지 삭제 -->
	<delete id="imageDelete">
		DELETE FROM BOARD_IMG
		WHERE BOARD_NO = #{boardNo}
		AND IMG_ORDER IN (${deleteList})
	</delete>	
	
	<!-- 이미지 수정 -->
	<update id="imageUpdate">
		UPDATE BOARD_IMG SET
		IMG_RENAME = #{imageReName},
		IMG_ORIGINAL = #{imageOriginal}
		WHERE BOARD_NO = #{boardNo}
		AND IMG_ORDER = #{imageOrder}
	</update>

	<!-- 이미지 삽입 -->
	<insert id="imageInsert">
		INSERT INTO BOARD_IMG
		VALUES(SEQ_IMG_NO.NEXTVAL,
			#{boardNo},
			#{imagePath},
			#{imageOriginal},
			#{imageReName},
			#{imageOrder}
			)
	</insert>

	<!-- 게시글 삭제 -->
	<update id="boardDelete">
		UPDATE BOARD SET
		BOARD_DEL_FL = 'Y'
		WHERE BOARD_NO = #{boardNo}
		AND CAT_CODE = #{cateCode}
	</update>
	
	<!-- DB 이미지 목록 조회 -->
   <select id="selectImageListAll" resultType="string">
   	SELECT IMG_RENAME FROM BOARD_IMG
   </select>
	

</mapper>
